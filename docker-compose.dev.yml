version: '3.8'

services:
  fastdds-dev:
    build:
      context: .
      dockerfile: Dockerfile
    image: fastdds-dev:latest
    container_name: fastdds-development
    
    # Interactive development mode
    stdin_open: true
    tty: true
    
    # Mount your application code
    volumes:
      - .:/workspace:rw
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/home/developer/.cache/go-build
    
    # Network configuration for DDS communication
    network_mode: host
    
    # Environment variables for development
    environment:
      - TERM=xterm-256color
      - FASTDDS_DEFAULT_PROFILES_FILE=/workspace/fastdds_profiles.xml
      - ROS_DOMAIN_ID=0
      - FASTDDS_BUILTIN_TRANSPORTS=UDPv4
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org,direct
      - GOSUMDB=sum.golang.org
    
    # Working directory is mounted code
    working_dir: /workspace
    
    # Development command - keep container running
    command: tail -f /dev/null
    
    # Resource limits for development
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "test", "-f", "/opt/fastdds/lib/libfastrtps.so"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Restart policy for development
    restart: unless-stopped
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Build service - for one-off builds
  fastdds-build:
    extends: fastdds-dev
    container_name: fastdds-builder
    command: |
      bash -c "
        echo 'üî® Building Go application with Fast DDS...'
        if [ ! -f go.mod ]; then
          echo '‚ùå No go.mod found. Please run: go mod init <module-name>'
          exit 1
        fi
        go mod tidy
        if [ -f fastdds.cpp ]; then
          echo 'üîß Building C++ wrapper...'
          g++ -I/opt/fastdds/include -std=c++14 -fPIC -c fastdds.cpp -o fastdds.o
          ar rcs libfastdds_wrapper.a fastdds.o
        fi
        echo 'üöÄ Building Go application...'
        go build -o app *.go
        echo '‚úÖ Build complete! Run with: ./app'
      "
    profiles:
      - build

volumes:
  go-mod-cache:
    driver: local
  go-build-cache:
    driver: local

networks:
  default:
    driver: bridge 